#include <stdio.h>
#include <string.h>
#include <stdlib.h> 

#define MAX_PRODUCTS 5     
#define MAX_NAME_LEN 100   

typedef struct {
    int id;
    char name[MAX_NAME_LEN];
    int price;
    int stock_in;
    int sales_out;
    long long total_sales_amount;
    int current_inventory;
    int is_registered;
} Product;

void clear_input_buffer();
void initialize_products(Product products[]);
void print_main_menu();
void handle_stock_in(Product products[]);
void handle_sales_out(Product products[]);
void display_product_info(const Product products[]);
void display_all_status(const Product products[]);

int main()
{
    Product products[MAX_PRODUCTS];
    initialize_products(products);
    int menu_selection;

    while (1) {
        print_main_menu();
        printf("입력:");

        if (scanf("%d", &menu_selection) != 1) {
            clear_input_buffer();
            printf("잘못된 입력입니다. 1~5 사이의 숫자를 입력해주세요.\n");
            continue;
        }
        clear_input_buffer();

        switch (menu_selection) {
        case 1:
            printf("1 << 입고메뉴실행(상품 갯수 초과 시 메시지 출력)\n");
            handle_stock_in(products);
            break;
        case 2:
            printf("2 << 판매메뉴실행\n");
            handle_sales_out(products);
            break;
        case 3:
            display_product_info(products);
            break;
        case 4:
            display_all_status(products);
            break;
        case 5:
            printf("프로그램을 종료합니다.\n");
            return 0;
        default:
            printf("잘못된 메뉴 선택입니다. (1~5)\n");
            break;
        }
    }
    return 0;
}

void clear_input_buffer() {
    int c;
    while ((c = getchar()) != '\n' && c != EOF);
}

void initialize_products(Product products[]) {
    for (int i = 0; i < MAX_PRODUCTS; i++) {
        products[i].id = i + 1;
        products[i].name[0] = '\0';
        products[i].price = 0;
        products[i].stock_in = 0;
        products[i].sales_out = 0;
        products[i].total_sales_amount = 0;
        products[i].current_inventory = 0;
        products[i].is_registered = 0;
    }
}

void print_main_menu() {
    printf("\n원하는 메뉴를 선택하세요.(1. 입고, 2. 판매, 3. 개별현황, 4. 전체현황, 5. 종료)\n");
}

void handle_stock_in(Product products[]) {
    int id;
    int stock_quantity;
    int price;
    char name[MAX_NAME_LEN];

    printf("상품ID : (입력)");
    if (scanf("%d", &id) != 1) {
        clear_input_buffer();
        printf("ID는 숫자로 입력해야 합니다.\n");
        return;
    }
    clear_input_buffer();

    if (id < 1 || id > MAX_PRODUCTS) {
        printf("잘못된 상품 ID입니다. (1~%d)\n", MAX_PRODUCTS);
        return;
    }

    Product* p = &products[id - 1];

    printf("상품명 : (입력)");
    if (fgets(name, MAX_NAME_LEN, stdin) == NULL) return;
    name[strcspn(name, "\n")] = 0;
    strcpy(p->name, name);

    printf("입고량 : (입력)");
    if (scanf("%d", &stock_quantity) != 1 || stock_quantity < 0) {
        clear_input_buffer();
        printf("입고 수량은 0 이상의 숫자로 입력해야 합니다.\n");
        return;
    }
    clear_input_buffer();

    printf("판매가격 : (입력)");
    if (scanf("%d", &price) != 1 || price < 0) {
        clear_input_buffer();
        printf("가격은 0 이상의 숫자로 입력해야 합니다.\n");
        return;
    }
    clear_input_buffer();

    p->price = price;
    p->stock_in += stock_quantity;
    p->current_inventory += stock_quantity;
    p->is_registered = 1;
}

void handle_sales_out(Product products[]) {
    int id;
    int sales_quantity;

    printf("상품ID : (입력)");
    if (scanf("%d", &id) != 1) {
        clear_input_buffer();
        printf("ID는 숫자로 입력해야 합니다.\n");
        return;
    }
    clear_input_buffer();

    if (id < 1 || id > MAX_PRODUCTS) {
        printf("잘못된 상품 ID입니다.\n");
        return;
    }

    Product* p = &products[id - 1];

    if (!p->is_registered) {
        printf("상품 ID %d는 등록되지 않은 상품입니다. 입고 메뉴에서 먼저 등록해주세요.\n", id);
        return;
    }

    printf("판매량 : (입력)");
    if (scanf("%d", &sales_quantity) != 1 || sales_quantity < 0) {
        clear_input_buffer();
        printf("판매 수량은 0 이상의 숫자로 입력해야 합니다. 판매를 취소합니다.\n");
        return;
    }
    clear_input_buffer();

    if (sales_quantity > p->current_inventory) {
        printf("재고가 부족합니다! (요청 수량: %d, 현재 재고: %d)\n", sales_quantity, p->current_inventory);
        return;
    }

    p->sales_out += sales_quantity;
    p->current_inventory -= sales_quantity;
    p->total_sales_amount += (long long)sales_quantity * p->price;
}

void display_product_info(const Product products[]) {
    int id;
    printf("\n--- 3. 개별 상품 정보 ---\n");
    printf("정보를 확인할 상품 ID (1~%d)를 입력하세요: ", MAX_PRODUCTS);
    if (scanf("%d", &id) != 1) {
        clear_input_buffer();
        printf("ID는 숫자로 입력해야 합니다.\n");
        return;
    }
    clear_input_buffer();

    if (id < 1 || id > MAX_PRODUCTS) {
        printf("잘못된 상품 ID입니다.\n");
        return;
    }

    const Product* p = &products[id - 1];

    if (!p->is_registered) {
        printf("상품 ID %d는 등록되지 않은 상품입니다.\n", id);
        return;
    }

    printf("\n--- 상품 ID %d 정보 ---\n", id);
    printf("상품명: %s\n", p->name);
    printf("판매 가격: %d원\n", p->price);
    printf("총 입고 수량: %d개\n", p->stock_in);
    printf("총 판매 수량: %d개\n", p->sales_out);
    printf("현재 재고 수량: %d개\n", p->current_inventory);
    printf("총 판매 금액: %lld원\n", p->total_sales_amount);
    printf("---------------------------\n");
}

void display_all_status(const Product products[]) {
    printf("\n--- 4. 전체 상품 현황 ---\n");
    printf("| ID | %-20s | %-6s | %-6s | %-6s | %-6s | %-10s |\n",
        "상품명", "가격", "입고량", "판매량", "재고량", "총판매금액");
    printf("|----|----------------------|--------|--------|--------|--------|------------|\n");

    long long grand_total_sales_amount = 0;
    int grand_total_stock_in = 0;
    int grand_total_sales_out = 0;
    int registered_count = 0;

    int max_sales = -1;
    int min_sales = -1;
    int max_id = -1;
    int min_id = -1;

    for (int i = 0; i < MAX_PRODUCTS; i++) {
        const Product* p = &products[i];
        if (p->is_registered) {
            printf("| %-2d | %-20s | %-6d | %-6d | %-6d | %-6d | %-10lld |\n",
                p->id, p->name, p->price, p->stock_in, p->sales_out, p->current_inventory, p->total_sales_amount);

            grand_total_sales_amount += p->total_sales_amount;
            grand_total_stock_in += p->stock_in;
            grand_total_sales_out += p->sales_out;
            registered_count++;

            if (max_id == -1 || p->sales_out > max_sales) {
                max_sales = p->sales_out;
                max_id = p->id;
            }
            if (min_id == -1 || p->sales_out < min_sales) {
                min_sales = p->sales_out;
                min_id = p->id;
            }
        }
    }

    if (registered_count == 0) {
        printf("| 등록된 상품이 없습니다.\n");
        printf("|--------------------------------------------------------------------------|\n");
        return;
    }

    printf("|--------------------------------------------------------------------------|\n");

    printf("**재고 부족 상품** (2개 이하):\n");
    int warning_count = 0;
    for (int i = 0; i < MAX_PRODUCTS; i++) {
        if (products[i].is_registered && products[i].current_inventory <= 2) {
            printf("   - ID %d: '%s' (현재 재고: %d개)\n",
                products[i].id, products[i].name, products[i].current_inventory);
            warning_count++;
        }
    }
    if (warning_count == 0) {
        printf("   - 재고 부족 상품이 없습니다.\n");
    }

    double sales_rate = (grand_total_stock_in > 0) ? (double)grand_total_sales_out / grand_total_stock_in * 100.0 : 0.0;

    printf("\n**전체 요약:**\n");
    printf("   - 총 입고 수량: %d개\n", grand_total_stock_in);
    printf("   - 총 판매 수량: %d개 (전체 판매율: %.2f%%)\n", grand_total_sales_out, sales_rate);
    printf("   - 총 판매 금액: %lld원\n", grand_total_sales_amount);

    if (max_id != -1) {
        printf("   - Best) 가장 많이 판매된 상품: ID %d, '%s' (판매량: %d)\n",
            products[max_id - 1].id, products[max_id - 1].name, max_sales);
    }
    if (min_id != -1) {
        printf("   - Worst) 가장 적게 판매된 상품: ID %d, '%s' (판매량: %d)\n",
            products[min_id - 1].id, products[min_id - 1].name, min_sales);
    }
    printf("----------------------------------------------------------------------------\n");
}
